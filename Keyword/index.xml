<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Keyword on Visual Elixir Reference</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/</link><description>Recent content in Keyword on Visual Elixir Reference</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://superruzafa.github.io/visual-elixir-reference/Keyword/index.xml" rel="self" type="application/rss+xml"/><item><title>delete/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete/2/</guid><description>Keyword.delete/2 defmodule Keyword do def delete(keywords, key) end Deletes the entries in the keyword list for a specific key.
If the key does not exist, returns the keyword list unchanged.</description></item><item><title>delete_first/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete_first/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete_first/2/</guid><description>Keyword.delete_first/2 defmodule Keyword do def delete(keywords, key) end Deletes the first entry in the keyword list for a specific key.
If the key does not exist, returns the keyword list unchanged.</description></item><item><title>drop/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/drop/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/drop/2/</guid><description>Keyword.drop/2 defmodule Keyword do def drop(keywords, keys) end Drops the entries in the keyword list for a specific key.
If the key does not exist, returns the keyword list unchanged.</description></item><item><title>fetch!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch_/2/</guid><description>Keyword.fetch!/2 defmodule Keyword do def fetch!(keywords, key) end Fetches the value for a specific key and returns it in a tuple.
If key does not exist, a KeyError is raised.</description></item><item><title>fetch/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch/2/</guid><description>Keyword.fetch/2 defmodule Keyword do def fetch(keywords, key) end Fetches the value for a specific key and returns it in a tuple.
If the key does not exist, returns :error.</description></item><item><title>get/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/get/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/get/3/</guid><description>Keyword.get/3 defmodule Keyword do def get(keywords, key, default \\ nil) end Gets the value for a specific key.
If duplicated entries exist, the first one is returned.
If key does not exist, return the default value (nil if no default value).</description></item><item><title>get_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_lazy/3/</guid><description>Keyword.get_lazy/3 defmodule Keyword do def get_lazy(keywords, key, fun) end Gets the value for a specific key.
If duplicated entries exist, the first one is returned.
If key does not exist, lazily evaluates fun and returns its result.
This is useful if the default value is very expensive to calculate or generally difficult to setup and teardown again.</description></item><item><title>get_values/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_values/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_values/2/</guid><description>Keyword.get_values/2 defmodule Keyword do def get_values(keywords, key) end Gets all values for a specific key.</description></item><item><title>has_key?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/has_key/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/has_key/2/</guid><description>Keyword.has_key?/2 defmodule Keyword do def has_key?(keywords, key) end Returns true if a given key exists in the given keywords.
If key does not exist, returns false.</description></item><item><title>keys/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/keys/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/keys/1/</guid><description>Keyword.keys/1 defmodule Keyword do def keys(keywords) end Returns all keys from the keyword list.</description></item><item><title>keyword?/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/keyword_/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/keyword_/1/</guid><description>Keyword.keyword?/1 defmodule Keyword do def keyword?(term) end Returns true if term is a keyword list; otherwise returns false.</description></item><item><title>new/0</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/0/</guid><description>Keyword.new/0 defmodule Keyword do def new() end Returns an empty keyword list, i.e. an empty list.</description></item><item><title>new/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/1/</guid><description>Keyword.new/1 defmodule Keyword do def new(enumerable) end Creates a keyword list from an enumerable. Duplicated entries are removed, the latest one prevails.</description></item><item><title>new/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/2/</guid><description>Keyword.new/2 defmodule Keyword do def new(enumerable, fun) end Creates a keyword list from an enumerable via the transformation function fun. Duplicated entries are removed, the latest one prevails.</description></item><item><title>pop!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_/2/</guid><description>Keyword.pop!/2 defmodule Keyword do def pop!(keywords, key) end Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, KeyError is raised.</description></item><item><title>pop/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop/3/</guid><description>Keyword.pop/3 defmodule Keyword do def pop(keywords, key, default \\ nil) end Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, {default, keywords} is returned.</description></item><item><title>pop_first/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_first/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_first/3/</guid><description>Keyword.pop_first/3 defmodule Keyword do def pop_first(keywords, key, default \\ nil) end Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, {default, keywords} is returned.</description></item><item><title>pop_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_lazy/3/</guid><description>Keyword.pop_lazy/3 defmodule Keyword do def pop_lazy(keywords, key, fun) end Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, the value from the function fun is returned in {value, keywords}.</description></item><item><title>pop_values/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_values/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_values/2/</guid><description>Keyword.pop_values/2 defmodule Keyword do def pop_values(keywords, key) end Returns all values for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is a list of values for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, {[], keyword_list} is returned.</description></item><item><title>put/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/put/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/put/3/</guid><description>Keyword.put/3 defmodule Keyword do def put(keywords, key, value) end Puts the given value under key. If a previous value is already stored, all entries are removed and the value is overridden.</description></item><item><title>put_new/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new/3/</guid><description>Keyword.put_new/3 defmodule Keyword do def put_new(keywords, key, value) end Puts the given value under key unless the entry key already exists.
If keywords doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using value as value.</description></item><item><title>put_new_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new_lazy/3/</guid><description>Keyword.put_new_lazy/3 defmodule Keyword do def put_new_lazy(keywords, key, fun) end Evaluates fun and puts the result under key in keywords unless key is already present.
This function is useful in case you want to compute the value to put under key only if key is not already present, as for example, when the value is expensive to calculate or generally difficult to setup and teardown again.
If keywords doesn’t contain key then it’s added using the value returned from fun.</description></item><item><title>replace!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace_/3/</guid><description>Keyword.replace!/3 defmodule Keyword do def replace!(keywords, key, value) end Alters the value stored under key to value, but only if the entry key already exists in keywords.
If key is not present in keywords, a KeyError exception is raised.</description></item><item><title>split/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/split/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/split/2/</guid><description>Keyword.split/2 defmodule Keyword do def split(keywords, keys) end Takes all entries corresponding to the given keys in keywords and extracts them into a separate keyword list.
Returns a tuple with the new list and the old list with removed keys.
Keys for which there are no entries in the keyword list are ignored.
Entries with duplicated keys end up in the same keyword list.</description></item><item><title>take/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/take/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/take/2/</guid><description>Keyword.take/2 defmodule Keyword do def take(keywords, keys) end Takes all entries corresponding to the given keys and returns them in a new keyword list.
Duplicated keys are preserved in the new keyword list.</description></item><item><title>to_list/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/to_list/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/to_list/1/</guid><description>Keyword.to_list/1 defmodule Keyword do def to_list(keywords) end Returns the keyword list itself.</description></item><item><title>update!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/update_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/update_/3/</guid><description>Keyword.update!/3 defmodule Keyword do def update(keywords, key, fun) end Updates the key with the given function fun. If there are duplicated keys, they are all removed and only the first one is updated.
If the key does not exist, raises KeyError.</description></item><item><title>update/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/update/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/update/4/</guid><description>Keyword.update/4 defmodule Keyword do def update(keywords, key, value, fun) end Updates the key in keywords with the given function. If there are duplicated keys, they are all removed and only the first one is updated.
If the key does not exist, inserts the given value value.</description></item><item><title>values/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/values/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/values/1/</guid><description>Keyword.values/1 defmodule Keyword do def values(keywords) end Returns all values from the keyword list.
Values from duplicated keys will be kept in the final list of values.</description></item></channel></rss>