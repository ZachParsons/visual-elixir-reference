<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>List on Visual Elixir Reference</title><link>https://superruzafa.github.io/visual-elixir-reference/List/</link><description>Recent content in List on Visual Elixir Reference</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://superruzafa.github.io/visual-elixir-reference/List/index.xml" rel="self" type="application/rss+xml"/><item><title>delete/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/delete/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/delete/2/</guid><description>List.delete/2 defmodule List do def delete(list, elem) end Deletes the given element from the list. Returns a new list without the element. If the element occurs more than once in the list, just the first occurrence is removed.</description></item><item><title>delete_at/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/delete_at/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/delete_at/2/</guid><description>List.delete_at/2 defmodule List do def delete_at(list, index) end Produces a new list by removing the value at the specified index. If index is out of bounds, the original list is returned.
Negative indices indicate an offset from the end of the list.</description></item><item><title>duplicate/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/duplicate/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/duplicate/2/</guid><description>List.duplicate/2 defmodule List do def duplicate(elem, count) end Duplicates the given element count times in a list. If count is 0, an empty list is returned.</description></item><item><title>first/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/first/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/first/1/</guid><description>List.first/1 defmodule List do def first(list) end Returns the first element in list.
Returns nil if list is empty.</description></item><item><title>flatten/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/flatten/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/flatten/1/</guid><description>List.flatten/1 defmodule List do def flatten(list) end Flattens the given list of nested lists.
Empty list elements are discarded.</description></item><item><title>flatten/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/flatten/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/flatten/2/</guid><description>List.flatten/2 defmodule List do def flatten(list, tail) end Flattens the given list of nested lists. The list tail will be added at the end of the flattened list.
Empty list elements from list are discarded, but not the ones from tail.</description></item><item><title>foldl/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/foldl/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/foldl/3/</guid><description>List.foldl/3 defmodule List do def foldl(list, acc, fun) end Folds (reduces) the given list from the left with a function. Requires an accumulator.</description></item><item><title>foldr/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/foldr/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/foldr/3/</guid><description>List.foldr/3 defmodule List do def foldr(list, acc, fun) end Folds (reduces) the given list from the right with a function. Requires an accumulator.</description></item><item><title>insert_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/insert_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/insert_at/3/</guid><description>List.insert_at/3 defmodule List do def insert_at(list, index, value) end Returns a list with value inserted at the specified index. Note that index is capped at the list length.
Negative indices indicate an offset from the end of the list.</description></item><item><title>keydelete/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keydelete/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keydelete/3/</guid><description>List.keydelete/3 defmodule List do def keydelete(list, key, position) end Receives a list of tuples and deletes the first tuple where the element at position matches the given key. Returns the new list.</description></item><item><title>keyfind/4</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keyfind/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keyfind/4/</guid><description>List.keyfind/4 defmodule List do def keyfind(list, key, position, default \\ nil) end Receives a list of tuples and returns the first tuple where the element at position in the tuple matches the given key.
If no matching tuple is found, default is returned.</description></item><item><title>keymember?/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keymember_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keymember_/3/</guid><description>List.keymember?/3 defmodule List do def keymember?(list, key, position) end Receives a list of tuples and returns true if there is a tuple where the element at position in the tuple matches the given key.
Otherwise it returns false.</description></item><item><title>keyreplace/4</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keyreplace/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keyreplace/4/</guid><description>List.keyreplace/4 defmodule List do def keyreplace(list, key, position, new_tuple) end Receives a list of tuples and if the identified element by key at position exists, it is replaced with new_tuple.
If no tuple is found the list is returned untouched.</description></item><item><title>keystore/4</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keystore/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keystore/4/</guid><description>List.keystore/4 defmodule List do def keystore(list, key, position, new_tuple) end Receives a list of tuples and replaces the element identified by key at position with new_tuple.
If the element does not exist, it is added to the end of the list.</description></item><item><title>keytake/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keytake/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keytake/3/</guid><description>List.keytake/3 defmodule List do def keytake(list, key, position) end Receives a list of tuples and returns the first tuple where the element at position in the tuple matches the given key, as well as the list without found tuple.
If such a tuple is not found, nil will be returned.</description></item><item><title>last/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/last/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/last/1/</guid><description>List.last/1 defmodule List do def last(list) end Returns the last element in list.
Returns nil if list is empty.</description></item><item><title>pop_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/pop_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/pop_at/3/</guid><description>List.pop_at/3 defmodule List do def pop_at(list, index, default \\ nil) end Returns and removes the value at the specified index in the list.
Negative indices indicate an offset from the end of the list.
If index is out of bounds, the original list is returned.</description></item><item><title>replace_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/replace_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/replace_at/3/</guid><description>List.replace_at/3 defmodule List do def replace_at(list, index, value) end Returns a list with a replaced value at the specified index.
Negative indices indicate an offset from the end of the list.
If index is out of bounds, the original list is returned.</description></item><item><title>starts_with?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/starts_with_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/starts_with_/2/</guid><description>List.starts_with?/2 defmodule List do def starts_with(list, prefix) end Returns true if list starts with the given prefix. Also if prefix is an empty list, it returns true.
Otherwise returns false.</description></item><item><title>to_integer/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/1/</guid><description>List.to_integer/1 defmodule List do def to_integer(charlist) end Returns an integer whose text representation is charlist.</description></item><item><title>to_integer/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/2/</guid><description>List.to_integer/2 defmodule List do def to_integer(charlist, base) end Returns an integer whose text representation is charlist in base base.
The base needs to be between 2 and 36.</description></item><item><title>to_tuple/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/to_tuple/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/to_tuple/1/</guid><description>List.to_tuple/1 defmodule List do def to_tuple(list) end Converts a list to a tuple.</description></item><item><title>update_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/update_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/update_at/3/</guid><description>List.update_at/3 defmodule List do def update_at(list, index, fun) end Returns a list with an updated value at the specified index. If index is out of bounds, the original list is returned.
Negative indices indicate an offset from the end of the list.</description></item><item><title>wrap/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/wrap/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/wrap/1/</guid><description>List.wrap/1 defmodule List do def wrap(term) end Wraps term in a list if this is not list.
If term is already a list, it returns the list.
If term is nil, it returns an empty list.</description></item><item><title>zip/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/zip/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/zip/1/</guid><description>List.zip/1 defmodule List do def zip(list_of_lists) end Zips corresponding elements from each list in list_of_lists.
The zipping finishes as soon as any list terminates.</description></item></channel></rss>